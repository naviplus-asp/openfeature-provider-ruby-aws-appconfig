name: Integration Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  integration-test:
    name: Integration Test with Mock AppConfig Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create mock server container
        run: |
          # Create a custom nginx configuration for the mock server
          cat > nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }

          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;

              sendfile        on;
              keepalive_timeout  65;

              server {
                  listen       80;
                  server_name  localhost;

                  location / {
                      root   /usr/share/nginx/html;
                      index  index.html index.htm;
                  }

                  location ~* \.json$ {
                      add_header Content-Type application/json;
                      add_header Access-Control-Allow-Origin *;
                      add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                      add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
                  }

                  error_page   500 502 503 504  /50x.html;
                  location = /50x.html {
                      root   /usr/share/nginx/html;
                  }
              }
          }
          EOF

      - name: Create mock configuration data
        run: |
          # Create the directory structure
          mkdir -p applications/test-integration-app/environments/test-integration-env/configurations

          # Create mock configuration data
          cat > applications/test-integration-app/environments/test-integration-env/configurations/test-integration-profile << 'EOF'
          {
            "test-boolean-flag": true,
            "test-string-flag": "Hello from Agent",
            "test-number-flag": 42,
            "test-object-flag": "{\"theme\": \"dark\", \"language\": \"en\"}",
            "test-multi-variant-flag": {
              "variants": [
                { "name": "english", "value": "Hello World" },
                { "name": "japanese", "value": "こんにちは世界" },
                { "name": "spanish", "value": "Hola Mundo" }
              ],
              "defaultVariant": "english",
              "targetingRules": [
                {
                  "conditions": [
                    { "attribute": "language", "operator": "equals", "value": "ja" }
                  ],
                  "variant": "japanese"
                },
                {
                  "conditions": [
                    { "attribute": "language", "operator": "equals", "value": "es" }
                  ],
                  "variant": "spanish"
                }
              ]
            },
            "test-complex-targeting-flag": {
              "variants": [
                { "name": "none", "value": 0 },
                { "name": "standard", "value": 10 },
                { "name": "premium", "value": 25 },
                { "name": "vip", "value": 50 }
              ],
              "defaultVariant": "none",
              "targetingRules": [
                {
                  "conditions": [
                    { "attribute": "plan", "operator": "equals", "value": "premium" },
                    { "attribute": "country", "operator": "equals", "value": "US" }
                  ],
                  "variant": "premium"
                },
                {
                  "conditions": [
                    { "attribute": "plan", "operator": "equals", "value": "vip" }
                  ],
                  "variant": "vip"
                }
              ]
            }
          }
          EOF

      - name: Start mock AppConfig server
        run: |
          # Start nginx container with mock configuration
          docker run -d \
            --name mock-appconfig-server \
            --health-cmd "wget --quiet --tries=1 --spider http://localhost/applications/test-integration-app/environments/test-integration-env/configurations/test-integration-profile" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 5 \
            -p 2772:80 \
            -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf:ro \
            -v $(pwd)/applications:/usr/share/nginx/html/applications:ro \
            nginx:alpine

      - name: Wait for mock server
        run: |
          echo "Waiting for mock AppConfig server to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:2772/applications/test-integration-app/environments/test-integration-env/configurations/test-integration-profile > /dev/null 2>&1; do sleep 2; done'
          echo "Mock server is ready!"

      - name: Test mock server response
        run: |
          echo "Testing mock server response..."
          curl -s http://localhost:2772/applications/test-integration-app/environments/test-integration-env/configurations/test-integration-profile | jq .

      - name: Run integration tests
        run: bundle exec rake test_integration

      - name: Run all tests
        run: bundle exec rake test_all

      - name: Cleanup
        if: always()
        run: |
          docker stop mock-appconfig-server || true
          docker rm mock-appconfig-server || true
